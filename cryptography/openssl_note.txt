$openssl x509 -pubkey < tls.crt | openssl pky -pubin -outfrom der | openssl dgst -sha256 -binary | openssl base64

bash-4.2$ openssl x509 -pubkey < test.crt | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | openssl base64
lJFY2T3+FEzF1G3HpkjNAZPhjiHQT9f5mDuG6h+hSG8=


Using csr to generate pin
$openssl req -pubkey < demo.csr | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | openssl base64

bash-4.2$ openssl req -pubkey < MYCSR.csr | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | openssl base64
vNHHK4eySa+w+R9O6T3fx78AKdVheRaAqKQfa1RdXs0=
bash-4.2$ 



PKI Usage for Signing and Verifying 
===================================

1. Create / Select a message 
2. Generate private and public RSA keys
3. Generate signature using private key
4. Verifying signature using public key

Example

1. touch sample.txt
2. echo "Sample Message" > sample.txt

3. openssl genrsa -aes128 -passout pass:SamplePass123456 -out private.pem 4096
4. openssl rsa -in private.pem -passin pass:SamplePass123456 -pubout -out public.pem 

5. openssl dgst -sha256 -sign private.pem -out sign.sha256 sample.txt
6. openssl dgst -sha256 -verify public.pem -signature sign.sha256 sample.txt




└─$ openssl list -mac-algorithms
Provided MACs:
  { 1.3.6.1.4.1.1722.12.2.1, BLAKE2BMAC } @ default
  { 1.3.6.1.4.1.1722.12.2.2, BLAKE2SMAC } @ default
  CMAC @ default
  { 1.0.9797.3.4, GMAC } @ default
  HMAC @ default
  { 2.16.840.1.101.3.4.2.19, KMAC-128, KMAC128 } @ default
  { 2.16.840.1.101.3.4.2.20, KMAC-256, KMAC256 } @ default
  SIPHASH @ default
  POLY1305 @ default
