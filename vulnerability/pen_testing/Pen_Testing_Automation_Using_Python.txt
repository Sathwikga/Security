Penetration Testing Automation Using Python and Kali Linux
==========================================================
1. Information Gathering
2. Network scanning Automation
3. Vulnerabilities Assessment
4. And much much more


Demo
----
import subprocess


def run_terminal(cmd_name, cmd):
    output = '[+] Executing ' + str(cmd_name) + '...\r\n'
    try:
        output += subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
        output += '\r\n'
    except Exception, e:
        output += str(e)
    output += '---------------------\r\n'
    
    return output
    
    
def exec_command():
    # Execute commands in terminal
    commands = ["list files":"ls", "current directory": "pwd"}
    results = ''
    for key, value in commands.items():
        output = run_terminal(key, value)
        results += output
    return results
    
def main():
    print exec_command()
    
if __name__=='__main__':
    main()
    
---------------------------------

Opening the Browser
-------------------
import time
import webbrowser

def launch_websites():
    websites = ['http://www/kali.org', 'http://www.python.org']
    # Launch website in browser
    for website in websites:
        webbrowser.open_new_tab(website)
        time.sleep(2)
        
def main():
    launch_websites()
    
if __name__=='__main__':
    main()
    
-----------------------------------
Saving the Results
------------------
import subprocess

def save_results(results, folder_name, file_name):
    try:
        # Create a directory for the category e.g. reconn, scanning, etc...
        if not os.path.isdir(folder_name):
            os.mkdir(folder_name)
        # Save the results to a file
        file_name = folder_name + "/" + file_name
        file_to_save = open(file_name, 'w')
        file_to_save.write(results)
        file_to_save.close()
    except Exception, e:
        print'[+] Error: cannot save the results to a file!'
    
def run_terminal(cmd_name, cmd):
    output = '[+] Executing ' + str(cmd_name) + '...\r\n'
    try:
        output += subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
        output += '\r\n'
    except Exception, e:
        output += str(e)
    output += '---------------------\r\n'
    
    return output
    
    
def exec_command():
    # Execute commands in terminal
    commands = ["list files":"ls", "current directory": "pwd"}
    results = ''
    for key, value in commands.items():
        output = run_terminal(key, value)
        results += output
    return results
    
def main():
    results = exec_command()
    print results
    # save the terminal results
    save_results(results, 'results', 'reports.txt')
    
if __name__=='__main__':
    main() 

---------------------

Putting It All Together
-----------------------
import os
import time
import subprocess
import argparse
import webbrowser

class Utilities:

