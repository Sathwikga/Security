
Google "Windows Server 2008 file migration tool"

File Server Migration Tools Only Available in Power Shell.

How to get some thing from Active Directory?

Get all disabled users.
See the ocked-out accounts.
We can see using GUI. But can we see the inactive users? Can we see the ones that haven't logged on in 60 days?

We can only see using PowerShell.

Office 365
==========
What I didnot like is that Office 365 creates a little Active Directory. It's not really an Active Directory, it's actually ADAM, you know AD LDS. And one of the things that it has hard wired is that I've got to change my password every 15 minutes or something, and this is annoying because that means my IPaD can't get to my email, my IPhone can't, my comuter can't, things start complaining, and it just, I'm like, okay, I get that we should change passwords, but let me do ot once a year because, wait for it, it's my data, I get to say. 

Command line gives you a broader range of power.

Set Static IP in Windows
=========================
netsh int ip set dns name="Ethernet" addr=192.168.45.101
ipconfig /all
ping 192.168.45.101 -n 1

Netsh - short for NetShell 
int = short for interface
ip - that's the internet protocol

There three commands follow it's own convention. 

PowerShell cmdlet structure
---------------------------
All PowerShell comdlets have a structure. Two words: The first one's like a verb, and noun.

The verbs come from a very small number of approved verbs, approved by the PowerShell Group. 
They get to control that stuff. They don't controll all the cmdlets, cmdlets can be written by 
anyone, 
All PowerShell cmdlets have names like verb-noun
------------------------------------------------
new, get, connect, set, remove = are verbs

The nouns come from the product group that controls whatever you're trying to administer
----------------------------------------------------------------------------------------
Process, Service, ADUser, VM, Computer

The nouns are always singular
-----------------------------
get-vm, restore-aduser, format-table



The nouns, the second part, coem from the Product Group that creates them. 

The Four Big PowerShell (POSH) verbs
------------------------------------
- new (Create Something New)
no cmdlet starts with "create-", it is always new - new-vm creates a VM

Hyper-V 2008 and 2008 R2

- get is like "show" or "list"
  get-vm would show all virtual machines on a Hyper-V server, 
  
- set lets you change some attributes
 set-vm would let you rename it, change how much RAM it has, etc.
 
- remove means "delete"
 remove-vm would delete a virtual machine
 
- add, clear, test, measure, rename

See them all with a cmdlet "get-verb"

Reusable Information
--------------------
- To rename a virtual machine from "WEBVM" to "VM1".
   rename-vm -name "WebVM" -newname "VM1"
   
   
- To rename "PC24" to "ACCOUNTINGPC",
   rename-computer -name "PC24" -newname "AccountingPC"
   
  
PowerShell has options to shorten them
--------------------------------------
- Shorter "alias" versions of commands:
  "import-module" becomes "ipmo"
  
  Dynamic Access Control whihc is a cool new feature of 2012 and 2012 RF2. 
  It greatly extends your ability to control your file servers, but it has this one command you've got to type 
  every time you change anything, and i'm not even going to do it right, it's something like, 
  

Discovering Commands: Get-Command
==================================
- How to find out if any cmdlets control printers?
- Use Get-Command
   Get-Command *printer*
   Gcm *printer*
   
   
Remote Control is Pretty Good
-----------------------------
1. invoke-command -computername PC10, PC12, PC20 
   -scriptblock {disable-windowsoptionalfeature -feature WindowsMediaPlayer}
2. invoke-command -computername (type C:\pcs.txt)
   -scriptblock {disable-windowsoptionalfeature -feature WindowsMediaPlayer}
3. invoke-command -computername (get-adcomputer -filter *).name 
   -scriptblock {disable-windowsoptionalfeature -feature WindowsMediaPlayer}   
   
   
   PowerShell does this really awesome , what rolls through that pipeline is not text, it's objects.
   Why does that matter? It means we never have to parse. 
   Objects are blobs of data that explain themselves. So instead of being the receiving application with this big pile
   of text and you're just praying to God that it's all formatted the way that you expect, 
   
   
   Let's say I want to delete all disabled accounts
   
   Get all AD users ==> get-aduser
   Extract only the disabled ones (where-object)
   Delete those accoutns (remove-aduser)
   
   
   If using 2008 R2, deleted objects go to a recycle bin.
   
   Interface to access Active Directory is ADSI, Active Directory Scripting Interface or may be a little bit of WMI, Windows 
   Management Instrumentation. 
   
   * This "one-liner" disables all accounts that have not logged on in 90 days:
   
   search-adaccount -datetime "01/03/2015" -usersonly | disable-adaccount
   
   * Powershell makes testing a "one-liner" easy by including "-whatif" in the "DANGEROUS" cmdlets, like this:
   search-adaccount -accountinactive -datetime "01/03/2015" -usersonly | disable=adaccount -whatif
   
   
   
